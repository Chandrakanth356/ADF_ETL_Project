{
	"name": "df_goldlayer",
	"properties": {
		"folder": {
			"name": "project"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_gen2_projectfolder",
						"type": "DatasetReference"
					},
					"name": "ProcessedSQData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_gen2_projectfolder",
						"type": "DatasetReference"
					},
					"name": "RefinedDataSink"
				}
			],
			"transformations": [
				{
					"name": "selectColumns"
				},
				{
					"name": "derivedColumn"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          AIRLINE as string,",
				"          FLIGHT_NUMBER as string,",
				"          UTC_DATE as string,",
				"          STATUS as string,",
				"          DIRECTION as string,",
				"          ORIGIN as string,",
				"          DESTINATION as string,",
				"          REGISTRATION as string,",
				"          BAY_NUMBER as string,",
				"          GATE_NUMBER as string,",
				"          AIRCRAFT_TYPE as string,",
				"          SCHEDULED_DATETIME as string,",
				"          ESTIMATED_DATETIME as string,",
				"          ONBLOCK_DATETIME as string,",
				"          OFFBLOCK_DATETIME as string,",
				"          MODIFIED_DATETIME as string,",
				"          STAND_NUMBER as string,",
				"          DELAY_REASON as string,",
				"          BAGGAGE_BELT as short,",
				"          PASSENGER_COUNT as short,",
				"          CARGO_WEIGHT as double,",
				"          CREW_COUNT as short,",
				"          REMARKS as string,",
				"          Row_number as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProcessedSQData",
				"ProcessedSQData select(mapColumn(",
				"          AIRLINE,",
				"          FLIGHT_IDENTITY = FLIGHT_NUMBER,",
				"          UTC_DATE,",
				"          STATUS,",
				"          DIRECTION,",
				"          ORIGIN,",
				"          DESTINATION,",
				"          REGISTRATION,",
				"          BAY_NUMBER,",
				"          GATE_NUMBER,",
				"          AIRCRAFT_TYPE,",
				"          SCHEDULED_DATETIME,",
				"          ESTIMATED_DATETIME,",
				"          ONBLOCK_DATETIME,",
				"          OFFBLOCK_DATETIME,",
				"          MODIFIED_DATETIME,",
				"          STAND_POSITION = STAND_NUMBER,",
				"          DELAY_REASON,",
				"          BAGGAGE_BELT,",
				"          PASSENGER_COUNT,",
				"          CARGO_WEIGHT,",
				"          CREW_COUNT,",
				"          REMARKS",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumns",
				"selectColumns derive(FLIGHT_NUMBER = substring(trim(FLIGHT_IDENTITY), 3),",
				"          FLIGHT_ID = split(concatWS('_',FLIGHT_IDENTITY,left(SCHEDULED_DATETIME,10),substring(SCHEDULED_DATETIME,12,17)),'.')[1],",
				"          STATUS = case(STATUS == 'SH','SCHEDULED',\r",
				"STATUS == 'CX', 'CANCELLED',\r",
				"'OTHER')) ~> derivedColumn",
				"derivedColumn select(mapColumn(",
				"          FLIGHT_ID,",
				"          AIRLINE,",
				"          FLIGHT_IDENTITY,",
				"          UTC_DATE,",
				"          STATUS,",
				"          DIRECTION,",
				"          ORIGIN,",
				"          DESTINATION,",
				"          REGISTRATION,",
				"          BAY_NUMBER,",
				"          GATE_NUMBER,",
				"          AIRCRAFT_TYPE,",
				"          SCHEDULED_DATETIME,",
				"          ESTIMATED_DATETIME,",
				"          ONBLOCK_DATETIME,",
				"          OFFBLOCK_DATETIME,",
				"          MODIFIED_DATETIME,",
				"          STAND_POSITION,",
				"          DELAY_REASON,",
				"          BAGGAGE_BELT,",
				"          PASSENGER_COUNT,",
				"          CARGO_WEIGHT,",
				"          CREW_COUNT,",
				"          REMARKS,",
				"          FLIGHT_NUMBER",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['refineddate.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> RefinedDataSink"
			]
		}
	}
}